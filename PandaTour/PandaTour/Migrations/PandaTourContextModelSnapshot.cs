// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PandaTour.Data;

namespace PandaTour.Migrations
{
    [DbContext(typeof(PandaTourContext))]
    partial class PandaTourContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PandaTour.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegistrationNumber");

                    b.HasKey("Id");

                    b.ToTable("Bus");
                });

            modelBuilder.Entity("PandaTour.Models.CityStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StationName");

                    b.HasKey("Id");

                    b.ToTable("CityStation");
                });

            modelBuilder.Entity("PandaTour.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("TicketId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TicketId", "UserId")
                        .IsUnique();

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("PandaTour.Models.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LineName");

                    b.HasKey("Id");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("PandaTour.Models.LineStopStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityStationId");

                    b.Property<bool>("IsLastStop");

                    b.Property<int>("LineId");

                    b.Property<int>("Order");

                    b.Property<decimal>("PriceToGetThere");

                    b.Property<int>("StopId");

                    b.Property<TimeSpan>("TimeToReachFromTheFirstLineStop")
                        .HasColumnType("Time");

                    b.HasKey("Id");

                    b.HasIndex("CityStationId");

                    b.HasIndex("LineId");

                    b.HasIndex("Order")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("StopId");

                    b.ToTable("LineStopStation");
                });

            modelBuilder.Entity("PandaTour.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusId");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("Time");

                    b.Property<int>("LineId");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("LineId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("PandaTour.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusId");

                    b.Property<string>("SeatNumber");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("PandaTour.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StopName");

                    b.HasKey("Id");

                    b.ToTable("Stop");
                });

            modelBuilder.Entity("PandaTour.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrivalStationOrder");

                    b.Property<int>("DepartureStationOrder");

                    b.Property<DateTime>("ForDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("Price");

                    b.Property<int>("ScheduleId");

                    b.Property<int>("SeatId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ForDate")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("PandaTour.Models.TicketStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ForDate");

                    b.Property<int>("LineStopStationId");

                    b.Property<int>("ScheduleId");

                    b.Property<int>("SeatId");

                    b.Property<int>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("LineStopStationId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ScheduleId", "LineStopStationId", "ForDate", "SeatId")
                        .IsUnique();

                    b.ToTable("TicketStop");
                });

            modelBuilder.Entity("PandaTour.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PandaTour.Models.Comment", b =>
                {
                    b.HasOne("PandaTour.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PandaTour.Models.LineStopStation", b =>
                {
                    b.HasOne("PandaTour.Models.CityStation", "CityStation")
                        .WithMany()
                        .HasForeignKey("CityStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.Line", "Line")
                        .WithMany("LineStopStation")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.Stop", "Stop")
                        .WithMany()
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTour.Models.Schedule", b =>
                {
                    b.HasOne("PandaTour.Models.Bus", "Bus")
                        .WithMany("Schedule")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.Line", "Line")
                        .WithMany("Schedule")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTour.Models.Seat", b =>
                {
                    b.HasOne("PandaTour.Models.Bus", "Bus")
                        .WithMany("Seats")
                        .HasForeignKey("BusId");
                });

            modelBuilder.Entity("PandaTour.Models.Ticket", b =>
                {
                    b.HasOne("PandaTour.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PandaTour.Models.TicketStop", b =>
                {
                    b.HasOne("PandaTour.Models.LineStopStation", "LineStopStation")
                        .WithMany("TicketStops")
                        .HasForeignKey("LineStopStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PandaTour.Models.Schedule", "Schedule")
                        .WithMany("TicketStops")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PandaTour.Models.Seat", "Seat")
                        .WithMany("TicketStops")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PandaTour.Models.Ticket", "Ticket")
                        .WithMany("TicketStops")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
